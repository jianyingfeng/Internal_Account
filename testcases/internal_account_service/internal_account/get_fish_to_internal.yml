- config:
    name: 将fishid转化为内部账号id
    base_url: ${ENV(internal_account_service_host)}
    variables:
        - internal_source_user_fish_id: ${internal_source_user_fish_id()}
        - unexist_fish_id: 6000000

- test:
    name: fish_id和内部账号未建立绑定关系，fishID绑定的邮箱在内部账号中存在
    skipIf: ${is_production()}
    setup_hooks:
        - ${delete_relation_internal_fish($internal_source_user_fish_id)}
    request:
        method: GET
        url: /accounts/convert/id/fish-to-internal?fish_id=$internal_source_user_fish_id
    validate:
        - eq: [status_code, 200]
        - length_equals: [content, 2]
        - type_match: [content, dict]
        - eq: [content.fish_id, $internal_source_user_fish_id]
        - eq: [content.internal_id, '${internal_source_user_id()}']
    extract:
        - create_relation_status_code: status_code

- test:
    name: fish_id和内部账号ID已建立绑定关系
    request:
        method: GET
        url: /accounts/convert/id/fish-to-internal?fish_id=$internal_source_user_fish_id
    validate:
        - eq: [status_code, 200]
        - length_equals: [content, 2]
        - eq: [content.fish_id, $internal_source_user_fish_id]
        - eq: [content.internal_id, '${internal_source_user_id()}']

- test:
    name: fish_id不存在
    request:
        method: GET
        url: /accounts/convert/id/fish-to-internal?fish_id=$unexist_fish_id
    validate:
        - eq: [status_code, 422]
        - eq: [content.error_code, "10007003"]